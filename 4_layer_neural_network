import numpy as np
import pandas as pd
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.utils import shuffle

digit=load_digits()
X=digit.data
y=digit.target
DScaler=StandardScaler()
X_digit=DScaler.fit_transform(X)
X=X_digit
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3)

size=[len(X_train[0]),15,15,10]
weights=[np.random.rand(y,x) for x,y in zip (size[:-1],size[1:])]

digit_output=np.eye(10)

def sg_fnc(z):
    return 1/(1+np.exp(-z))

def sg_fnc_drvtv(z):
    return sg_fnc(z)*(1-sg_fnc(z))

n=0
while n<10000:
    data_set=[shuffle([i for i in zip(X_train,y_train)])[n] for n in range(0,len(X_train),30)]
    cst=0
    for i in data_set:
        z2=np.dot(weights[0],i[0])
        a2=sg_fnc(z2)
        
        z3=np.dot(weights[1],a2)
        a3=sg_fnc(z3)
        
        z4=np.dot(weights[2],a3)
        a4=sig(z4)
        
        cst+=(np.sum(a4-digit_output[i[1]]))**2
    
    print('iteration:',n)
    print(cst)
        
    for i in data_set:
        z2=np.dot(weights[0],i[0])
        a2=sg_fnc(z2)
        
        z3=np.dot(weights[1],a2)
        a3=sg_fnc(z3)
        
        z4=np.dot(weights[2],a3)
        a4=sig(z4)
        
        Delta_4=(2*(a4-digit_output[i[1]])*sg_fnc_drvtv(z4)).reshape(1,10)
        lyr_4_grd=np.dot(a3.reshape(15,1),Delta_4).T
        
        Delta_3=np.dot(weights[2].T,Delta_4.T)*sg_fnc_drvtv(z3).reshape(15,1)
        lyr_3_grd=np.dot(a2.reshape(15,1),Delta_3.reshape(1,15)).T
        
        Delta_2=np.dot(weights[1].T,Delta_3)*sg_fnc_drvtv(z2).reshape(15,1)
        lyr_2_grd=np.dot(i[0].reshape(64,1),Delta_2.reshape(1,15)).T
        
        weights[2]-=0.1*lyr_4_grd
        weights[1]-=0.1*lyr_3_grd
        weights[0]-=0.1*lyr_2_grd
    
    n+=1

import numpy as np
import pandas as pd
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.utils import shuffle

digit=load_digits()
X=digit.data
y=digit.target
DScaler=StandardScaler()
X_digit=DScaler.fit_transform(X)
X=X_digit
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3)

size=[len(X_train[0]),15,15,10]
weights=[np.random.rand(y,x) for x,y in zip (size[:-1],size[1:])]

digit_output=np.eye(10)

def sg_fnc(z):
    return 1/(1+np.exp(-z))

def sg_fnc_drvtv(z):
    return sg_fnc(z)*(1-sg_fnc(z))

n=0
while n<10000:
    data_set=[shuffle([i for i in zip(X_train,y_train)])[n] for n in range(0,len(X_train),30)]
    cst=0
    for i in data_set:
        z2=np.dot(weights[0],i[0])
        a2=sg_fnc(z2)
        
        z3=np.dot(weights[1],a2)
        a3=sg_fnc(z3)
        
        z4=np.dot(weights[2],a3)
        a4=sig(z4)
        
        cst+=(np.sum(a4-digit_output[i[1]]))**2
    
    print('iteration:',n)
    print(cst)
        
    for i in data_set:
        z2=np.dot(weights[0],i[0])
        a2=sg_fnc(z2)
        
        z3=np.dot(weights[1],a2)
        a3=sg_fnc(z3)
        
        z4=np.dot(weights[2],a3)
        a4=sig(z4)
        
        Delta_4=(2*(a4-digit_output[i[1]])*sg_fnc_drvtv(z4)).reshape(1,10)
        lyr_4_grd=np.dot(a3.reshape(15,1),Delta_4).T
        
        Delta_3=np.dot(weights[2].T,Delta_4.T)*sg_fnc_drvtv(z3).reshape(15,1)
        lyr_3_grd=np.dot(a2.reshape(15,1),Delta_3.reshape(1,15)).T
        
        Delta_2=np.dot(weights[1].T,Delta_3)*sg_fnc_drvtv(z2).reshape(15,1)
        lyr_2_grd=np.dot(i[0].reshape(64,1),Delta_2.reshape(1,15)).T
        
        weights[2]-=0.1*lyr_4_grd
        weights[1]-=0.1*lyr_3_grd
        weights[0]-=0.1*lyr_2_grd
    
    n+=1
    
correct=0
for i in zip(X_test,y_test):
    if sg_fnc(np.dot(sg_fnc(np.dot(sg_fnc(np.dot(i[0],weights[0].T)),weights[1].T)),weights[2].T))[i[1]]>=0.5:
        correct+=1
print(correct/len(X_test))    
